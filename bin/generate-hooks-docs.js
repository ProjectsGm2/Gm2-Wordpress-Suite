#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const ROOT = path.resolve(__dirname, '..');

function walk(dir, files = []) {
  for (const entry of fs.readdirSync(dir)) {
    const full = path.join(dir, entry);
    const stat = fs.statSync(full);
    if (stat.isDirectory()) {
      if (['node_modules', '.git', 'vendor', 'tests', 'docs'].includes(entry)) continue;
      walk(full, files);
    } else if (entry.endsWith('.php') || entry.endsWith('.js')) {
      files.push(full);
    }
  }
  return files;
}

function parseFile(file) {
  const rel = path.relative(ROOT, file);
  const content = fs.readFileSync(file, 'utf8');
  const hooks = [];
  let match;
  if (file.endsWith('.php')) {
    const regex = /(do_action|apply_filters)\(\s*['"]([^'"]+)['"]/g;
    while ((match = regex.exec(content)) !== null) {
      const type = match[1] === 'do_action' ? 'action' : 'filter';
      const hook = match[2];
      const line = content.slice(0, match.index).split(/\r?\n/).length;
      hooks.push({ context: 'php', type, hook, file: rel, line });
    }
  } else if (file.endsWith('.js')) {
    const regex = /wp\.hooks\.(addAction|addFilter|doAction|applyFilters)\(\s*['"]([^'"]+)['"]/g;
    while ((match = regex.exec(content)) !== null) {
      const method = match[1];
      const type = (method === 'addAction' || method === 'doAction') ? 'action' : 'filter';
      const hook = match[2];
      const line = content.slice(0, match.index).split(/\r?\n/).length;
      hooks.push({ context: 'js', type, hook, file: rel, line });
    }
  }
  return hooks;
}

const files = walk(ROOT);
let hooks = [];
for (const f of files) {
  hooks = hooks.concat(parseFile(f));
}

hooks.sort((a, b) => a.hook.localeCompare(b.hook));

let out = '# Gm2 WordPress Suite API\n\n';
out += 'This file is generated by `bin/generate-hooks-docs.js`.\n\n';
const phpHooks = hooks.filter(h => h.context === 'php');
const jsHooks = hooks.filter(h => h.context === 'js');

if (phpHooks.length) {
  out += '## PHP Hooks\n\n';
  for (const h of phpHooks) {
    out += `### \`${h.hook}\` (${h.type})\n`;
    out += `Location: \`${h.file}:${h.line}\`\n\n`;
    out += '```php\n';
    out += `${h.type === 'action' ? 'do_action' : 'apply_filters'}( '${h.hook}', ... );\n`;
    out += '```\n\n';
  }
}

if (jsHooks.length) {
  out += '## JavaScript Hooks\n\n';
  for (const h of jsHooks) {
    out += `### \`${h.hook}\` (${h.type})\n`;
    out += `Location: \`${h.file}:${h.line}\`\n\n`;
    out += '```js\n';
    const method = h.type === 'action' ? 'wp.hooks.addAction' : 'wp.hooks.addFilter';
    out += `${method}( '${h.hook}', ... );\n`;
    out += '```\n\n';
  }
}

fs.writeFileSync(path.join(ROOT, 'docs', 'api.md'), out);
